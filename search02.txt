./app/gegl/gimpcurvesconfig.c:463:          /* pick some points from the curve and make them control
./app/paint/gimpsourcecore.c:276:          /*  If the control key is down, move the src target and return */
./app/paint/gimpperspectiveclone.c:211:          /*  If the control key is down, move the src target and return */
./app/text/gimptext-vectors.c:172:  GimpCoords     control;
./app/text/gimptext-vectors.c:182:  gimp_text_vector_coords (context, ftcontrol, &control);
./app/text/gimptext-vectors.c:185:  gimp_bezier_stroke_conicto (context->stroke, &control, &end);
./app/display/gimpdisplayshell-callbacks.c:642:  if (active_tool && gimp_tool_control_get_snap_to (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:646:      gimp_tool_control_get_snap_offsets (active_tool->control,
./app/display/gimpdisplayshell-callbacks.c:806:                     gimp_tool_control_get_handle_empty_image (active_tool->control)) &&
./app/display/gimpdisplayshell-callbacks.c:816:                         ! gimp_tool_control_get_handle_empty_image (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:820:                                                   gimp_tool_control_get_tool_cursor (active_tool->control),
./app/display/gimpdisplayshell-callbacks.c:855:                 (gimp_tool_control_get_motion_mode (active_tool->control) !=
./app/display/gimpdisplayshell-callbacks.c:877:                 gimp_tool_control_get_handle_empty_image (active_tool->control)))
./app/display/gimpdisplayshell-callbacks.c:890:                         ! gimp_tool_control_get_preserve (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:980:                 gimp_tool_control_get_handle_empty_image (active_tool->control)))
./app/display/gimpdisplayshell-callbacks.c:982:                if (gimp_tool_control_is_active (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:1104:            gimp_tool_control_get_snap_to (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:1108:            gimp_tool_control_get_snap_offsets (active_tool->control,
./app/display/gimpdisplayshell-callbacks.c:1142:             gimp_tool_control_get_motion_mode (active_tool->control) ==
./app/display/gimpdisplayshell-callbacks.c:1163:            if (gimp_tool_control_get_snap_to (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:1167:                gimp_tool_control_get_snap_offsets (active_tool->control,
./app/display/gimpdisplayshell-callbacks.c:1205:                gimp_tool_control_is_active (active_tool->control) &&
./app/display/gimpdisplayshell-callbacks.c:1207:                 gimp_tool_control_get_handle_empty_image (active_tool->control)))
./app/display/gimpdisplayshell-callbacks.c:1219:                    ! gimp_tool_control_get_scroll_lock (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:1232:                if ((gimp_tool_control_get_motion_mode (active_tool->control) ==
./app/display/gimpdisplayshell-callbacks.c:1256:                        if (gimp_tool_control_get_snap_to (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:1260:                            gimp_tool_control_get_snap_offsets (active_tool->control,
./app/display/gimpdisplayshell-callbacks.c:1355:                      gimp_tool_control_is_active (active_tool->control) &&
./app/display/gimpdisplayshell-callbacks.c:1471:                      gimp_tool_control_is_active (active_tool->control) &&
./app/display/gimpdisplayshell-callbacks.c:1540:               gimp_tool_control_get_handle_empty_image (active_tool->control)) &&
./app/display/gimpdisplayshell-callbacks.c:1550:                   ! gimp_tool_control_get_handle_empty_image (active_tool->control))
./app/display/gimpdisplayshell-callbacks.c:1554:                                             gimp_tool_control_get_tool_cursor (active_tool->control),
./app/display/gimpdisplayshell-callbacks.c:1574:        precision = gimp_tool_control_get_precision (active_tool->control);
./app/display/gimpdisplayshell-selection.c:165:                                      GimpSelectionControl  control)
./app/display/gimpdisplayshell-selection.c:173:      switch (control)
./app/display/gimpdisplayshell-autoscroll.c:154:      if (gimp_tool_control_get_snap_to (active_tool->control))
./app/display/gimpdisplayshell-autoscroll.c:158:          gimp_tool_control_get_snap_offsets (active_tool->control,
./app/display/gimpdisplayshell-handlers.c:67:                                                             GimpSelectionControl control,
./app/display/gimpdisplayshell-handlers.c:155:  g_signal_connect (image, "selection-control",
./app/display/gimpdisplayshell-handlers.c:413:                                              GimpSelectionControl  control,
./app/display/gimpdisplayshell-handlers.c:416:  gimp_display_shell_selection_control (shell, control);
./app/display/gimpdisplayshell-selection.h:27:                                              GimpSelectionControl  control);
./app/xcf/xcf-load.c:1810:                             "control-points", control_points,
./app/xcf/xcf-save.c:1800:           * then each control point.
./app/core/gimpscanconvert.c:347: * antialiasing but gives control over the value that should be used for pixels
./app/core/gimpitem.h:50:  gboolean          visible;            /*  control visibility       */
./app/core/gimpitem.h:51:  gboolean          linked;             /*  control linkage          */
./app/core/gimpimage.c:356:    g_signal_new ("selection-control",
./app/core/gimpimage.c:1880:                              GimpSelectionControl  control)
./app/core/gimpimage.c:1884:  g_signal_emit (image, gimp_image_signals[SELECTION_CONTROL], 0, control);
./app/core/gimpimage.h:202:                                         GimpSelectionControl  control);
./app/core/gimpimage.h:330:                                                  GimpSelectionControl  control);
./app/core/gimpcurve.c:610:          /*  pick some points from the curve and make them control
./app/core/gimpcurve.c:935:      /* ensure that the control points are used exactly */
./app/core/gimpcurve.c:953: * This function calculates the curve values between the control points
./app/core/gimpcurve.c:958: * calculates the necessary intermediate control points depending on the
./app/core/gimpcurve.c:959: * neighbor curve control points.
./app/core/gimpcurve.c:974:  /* the outer control points for the bezier curve. */
./app/core/gimpcurve.c:981:   * the x values of the inner control points are fixed at
./app/core/gimpcurve.c:1006:       * the control handle of the right tangent, to ensure that the curve
./app/pdb/vectors-cmds.c:2279:                                     "returns the control points of a stroke.",
./app/pdb/vectors-cmds.c:2280:                                     "returns the control points of a stroke. The interpretation of the coordinates returned depends on the type of the stroke. For Gimp 2.4 this is always a bezier stroke, where the coordinates are the control points.",
./app/pdb/vectors-cmds.c:2313:                                                                "List of the control points for the stroke (x0, y0, x1, y1, ...).",
./app/pdb/vectors-cmds.c:2333:                                     "Adds a stroke of a given type to the vectors object. The coordinates of the control points can be specified. For now only strokes of the type GIMP_VECTORS_STROKE_TYPE_BEZIER are supported. The control points are specified as a pair of float values for the x- and y-coordinate. The Bezier stroke type needs a multiple of three control points. Each Bezier segment endpoint (anchor, A) has two additional control points (C) associated. They are specified in the order CACCACCAC...",
./app/pdb/vectors-cmds.c:2360:                                                            "List of the x- and y-coordinates of the control points.",
./app/pdb/vectors-cmds.c:2540:                                                    "The x-coordinate of the control point",
./app/pdb/vectors-cmds.c:2546:                                                    "The y-coordinate of the control point",
./app/pdb/vectors-cmds.c:2593:                                                    "The x-coordinate of the first control point",
./app/pdb/vectors-cmds.c:2599:                                                    "The y-coordinate of the first control point",
./app/pdb/vectors-cmds.c:2605:                                                    "The x-coordinate of the second control point",
./app/pdb/vectors-cmds.c:2611:                                                    "The y-coordinate of the second control point",
./app/pdb/paths-cmds.c:903:                                                      "The number of elements in the array, i.e. the number of points in the path * 3. Each point is made up of (x, y, type) of floats. Currently only the creation of bezier curves is allowed. The type parameter must be set to (1) to indicate a BEZIER type curve. Note that for BEZIER curves, points must be given in the following order: ACCACCAC... If the path is not closed the last control point is missed off. Points consist of three control points (control/anchor/control) so for a curve that is not closed there must be at least two points passed (2 x,y pairs). If (num_path_points/3) % 3 = 0 then the path is assumed to be closed and the points are ACCACCACCACC.",
./app/pdb/gradient-cmds.c:2584:                                     "This funtions moves the position of an entire segment range by a delta. The actual delta (which is returned) will be limited by the control points of the neighboring segments.",
./app/pdb/gradient-cmds.c:2615:                               g_param_spec_boolean ("control-compress",
./app/pdb/gradient-cmds.c:2616:                                                     "control compress",
./app/pdb/color-cmds.c:906:                                     "Modifies the intensity mapping for one channel in the specified drawable. The drawable must be either grayscale or RGB, and the channel can be either an intensity component, or the value. The 'control_pts' parameter is an array of integers which define a set of control points which describe a Catmull Rom spline which yields the final intensity curve. Use the 'gimp-curves-explicit' function to explicitly modify intensity levels.",
./app/pdb/color-cmds.c:927:                                                      "The number of values in the control point array",
./app/pdb/color-cmds.c:931:                               gimp_param_spec_int8_array ("control-pts",
./app/pdb/color-cmds.c:932:                                                           "control pts",
./app/pdb/color-cmds.c:933:                                                           "The spline control points: { cp1.x, cp1.y, cp2.x, cp2.y, ... }",
./app/pdb/palette-cmds.c:887:                                     "This procedures allows to control how many colors are shown per row when the palette is being displayed. This value can only be changed if the palette is writable. The maximum allowed value is 64.",
./app/pdb/context-cmds.c:979:                                     "This procedure returns the name of the currently active brush. All paint operations and stroke operations use this brush to control the application of paint to the image.",
./app/pdb/context-cmds.c:1027:                                     "This procedure returns name of the the currently active pattern. All clone and bucket-fill operations with patterns will use this pattern to control the application of paint to the image.",
./app/pdb/text-tool-cmds.c:299:                                     "This tool requires a fontname matching an installed PangoFT2 font. You can specify the fontsize in units of pixels or points, and the appropriate metric is specified using the size_type argument. The x and y parameters together control the placement of the new text by specifying the upper left corner of the text bounding box. If the specified drawable parameter is valid, the text will be created as a floating selection attached to the drawable. If the drawable parameter is not valid (-1), the text will appear as a new layer. Finally, a border can be specified around the final rendered text. The border is measured in pixels. Parameter size-type is not used and is currently ignored. If you need to display a font in points, divide the size in points by 72.0 and multiply it by the image's vertical resolution.",
./app/pdb/paint-tools-cmds.c:857:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:891:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:950:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:984:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1031:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1065:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1119:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1153:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1187:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1235:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1287:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1321:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1361:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1408:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1442:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1482:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/pdb/paint-tools-cmds.c:1516:                                                      "Number of stroke control points (count each coordinate as 2 points)",
./app/vectors/gimpvectors-compat.c:73:  /*  skip the first control point, will set it later  */
./app/vectors/gimpvectors-compat.c:83:      /*  copy the first anchor to be the first control point  */
./app/vectors/gimpvectors-compat.c:90:          /*  copy the last control point to the beginning of the stroke  */
./app/vectors/gimpvectors-compat.c:103:          /*  copy the first anchor to be the first control point  */
./app/vectors/gimpvectors-compat.c:112:      /*  copy the last control point to the beginning of the stroke  */
./app/vectors/gimpvectors-compat.c:266:          /*  write the skipped control point  */
./app/vectors/gimpbezierstroke.c:682:   * beziercoords has to contain four GimpCoords with the four control points
./app/vectors/gimpbezierstroke.c:1018:  /* Check if the neighbor is at an end of the control points */
./app/vectors/gimpbezierstroke.c:1136:      /* Check if the neighbor is at an end of the control points */
./app/vectors/gimpbezierstroke.c:1244:                             "%d successive control handles", control_count);
./app/vectors/gimpbezierstroke.c:1283:                             "%d successive control handles", control_count);
./app/vectors/gimpbezierstroke.c:1383:          /* search for opposite control point. Sigh. */
./app/vectors/gimpbezierstroke.c:1676:                            const GimpCoords *control,
./app/vectors/gimpbezierstroke.c:1688:  gimp_coords_mix (2.0 / 3.0, control, 1.0 / 3.0, &start, &coords);
./app/vectors/gimpbezierstroke.c:1692:  gimp_coords_mix (2.0 / 3.0, control, 1.0 / 3.0, end, &coords);
./app/vectors/gimpbezierstroke.c:1877:  GimpCoords  ellips[4]; /* control points of untransformed ellipse segment */
./app/vectors/gimpbezierstroke.c:1878:  GimpCoords  ctrl[4];   /* control points of next bezier segment           */
./app/vectors/gimpbezierstroke.c:2119: * To be more exact, it also checks for the control points to be distributed
./app/vectors/gimpbezierstroke.c:2132:  /* calculate the "ideal" positions for the control points */
./app/vectors/gimpbezierstroke.c:2141:  /* calculate the deviation of the actual control points */
./app/vectors/gimpbezierstroke.c:2171:   * beziercoords has to contain four GimpCoords with the four control points
./app/vectors/gimpbezierstroke.h:62:                                                 const GimpCoords *control,
./app/vectors/gimpstroke.c:235:                                   "The control points of a Stroke",
./app/vectors/gimpstroke.c:240:                                   g_param_spec_value_array ("control-points",
./app/vectors/gimpstroke.c:244:                                                             "control points of "
./app/vectors/gimpstroke.c:1233:               * The idea is to give control points at the end of a
./app/dialogs/layer-options-dialog.c:213:      /*  For text layers add a toggle to control "auto-rename"  */
./app/tools/gimptoolcontrol.h:42:  gint                 paused_count;       /*  paused control count            */
./app/tools/gimptoolcontrol.h:88:void           gimp_tool_control_activate         (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:89:void           gimp_tool_control_halt             (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:90:gboolean       gimp_tool_control_is_active        (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:92:void           gimp_tool_control_pause            (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:93:void           gimp_tool_control_resume           (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:94:gboolean       gimp_tool_control_is_paused        (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:96:void           gimp_tool_control_set_preserve     (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:98:gboolean       gimp_tool_control_get_preserve     (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:100:void           gimp_tool_control_set_scroll_lock  (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:102:gboolean       gimp_tool_control_get_scroll_lock  (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:104:void     gimp_tool_control_set_handle_empty_image (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:106:gboolean gimp_tool_control_get_handle_empty_image (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:108:void           gimp_tool_control_set_wants_click  (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:110:gboolean       gimp_tool_control_get_wants_click  (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:112:void           gimp_tool_control_set_dirty_mask   (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:114:GimpDirtyMask  gimp_tool_control_get_dirty_mask   (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:116:void           gimp_tool_control_set_motion_mode  (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:118:GimpMotionMode gimp_tool_control_get_motion_mode  (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:120:void           gimp_tool_control_set_snap_to      (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:122:gboolean       gimp_tool_control_get_snap_to      (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:124:void           gimp_tool_control_set_snap_offsets (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:129:void           gimp_tool_control_get_snap_offsets (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:135:void           gimp_tool_control_set_precision    (GimpToolControl     *control,
./app/tools/gimptoolcontrol.h:138:               gimp_tool_control_get_precision    (GimpToolControl     *control);
./app/tools/gimptoolcontrol.h:140:void           gimp_tool_control_set_toggled      (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:142:gboolean       gimp_tool_control_get_toggled      (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:144:void gimp_tool_control_set_cursor                 (GimpToolControl    *control,
./app/tools/gimptoolcontrol.h:146:void gimp_tool_control_set_tool_cursor            (GimpToolControl    *control,
./app/tools/gimptoolcontrol.h:148:void gimp_tool_control_set_cursor_modifier        (GimpToolControl    *control,
./app/tools/gimptoolcontrol.h:150:void gimp_tool_control_set_toggle_cursor          (GimpToolControl    *control,
./app/tools/gimptoolcontrol.h:152:void gimp_tool_control_set_toggle_tool_cursor     (GimpToolControl    *control,
./app/tools/gimptoolcontrol.h:154:void gimp_tool_control_set_toggle_cursor_modifier (GimpToolControl    *control,
./app/tools/gimptoolcontrol.h:158:              gimp_tool_control_get_cursor          (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:161:              gimp_tool_control_get_tool_cursor     (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:164:              gimp_tool_control_get_cursor_modifier (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:166:void          gimp_tool_control_set_action_value_1  (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:168:const gchar * gimp_tool_control_get_action_value_1  (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:170:void          gimp_tool_control_set_action_value_2  (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:172:const gchar * gimp_tool_control_get_action_value_2  (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:174:void          gimp_tool_control_set_action_value_3  (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:176:const gchar * gimp_tool_control_get_action_value_3  (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:178:void          gimp_tool_control_set_action_value_4  (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:180:const gchar * gimp_tool_control_get_action_value_4  (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:182:void          gimp_tool_control_set_action_object_1 (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:184:const gchar * gimp_tool_control_get_action_object_1 (GimpToolControl *control);
./app/tools/gimptoolcontrol.h:186:void          gimp_tool_control_set_action_object_2 (GimpToolControl *control,
./app/tools/gimptoolcontrol.h:188:const gchar * gimp_tool_control_get_action_object_2 (GimpToolControl *control);
./app/tools/gimpsheartool.c:108:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_SHEAR);
./app/tools/gimpsheartool.c:179:  /*  If we haven't yet decided on which way to control shearing
./app/tools/gimpfliptool.c:106:  gimp_tool_control_set_snap_to            (tool->control, FALSE);
./app/tools/gimpfliptool.c:107:  gimp_tool_control_set_precision          (tool->control,
./app/tools/gimpfliptool.c:109:  gimp_tool_control_set_cursor             (tool->control, GIMP_CURSOR_MOUSE);
./app/tools/gimpfliptool.c:110:  gimp_tool_control_set_toggle_cursor      (tool->control, GIMP_CURSOR_MOUSE);
./app/tools/gimpfliptool.c:111:  gimp_tool_control_set_tool_cursor        (tool->control,
./app/tools/gimpfliptool.c:113:  gimp_tool_control_set_toggle_tool_cursor (tool->control,
./app/tools/gimpfliptool.c:165:  gimp_tool_control_set_cursor_modifier        (tool->control, modifier);
./app/tools/gimpfliptool.c:166:  gimp_tool_control_set_toggle_cursor_modifier (tool->control, modifier);
./app/tools/gimpfliptool.c:168:  gimp_tool_control_set_toggled (tool->control,
./app/tools/gimpcurvestool.c:323:      status = _("Click to add a control point");
./app/tools/gimpcurvestool.c:328:      status = _("Click to add control points to all channels");
./app/tools/gimpcolorpickertool.c:114:  tool_class->control       = gimp_color_picker_tool_control;
./app/tools/gimpcolorpickertool.c:179:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/tools-enums.h:161:/*  Tool control actions  */
./app/tools/gimpcroptool.c:147:  tool_class->control             = gimp_crop_tool_control;
./app/tools/gimpcroptool.c:174:  gimp_tool_control_set_wants_click (tool->control, TRUE);
./app/tools/gimpcroptool.c:175:  gimp_tool_control_set_precision   (tool->control,
./app/tools/gimpcroptool.c:177:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_CROP);
./app/tools/gimpcroptool.c:245:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimptexttool.c:184:  tool_class->control        = gimp_text_tool_control;
./app/tools/gimptexttool.c:216:  gimp_tool_control_set_scroll_lock     (tool->control, TRUE);
./app/tools/gimptexttool.c:217:  gimp_tool_control_set_precision       (tool->control,
./app/tools/gimptexttool.c:219:  gimp_tool_control_set_tool_cursor     (tool->control,
./app/tools/gimptexttool.c:221:  gimp_tool_control_set_action_object_1 (tool->control,
./app/tools/gimptexttool.c:298:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimptexttool.c:418:          gimp_tool_control_halt (tool->control);
./app/tools/gimpfreeselecttool.c:214:  tool_class->control             = gimp_free_select_tool_control;
./app/tools/gimpfreeselecttool.c:237:  gimp_tool_control_set_scroll_lock (tool->control, FALSE);
./app/tools/gimpfreeselecttool.c:238:  gimp_tool_control_set_wants_click (tool->control, TRUE);
./app/tools/gimpfreeselecttool.c:239:  gimp_tool_control_set_precision   (tool->control,
./app/tools/gimpfreeselecttool.c:241:  gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimpfreeselecttool.c:451:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpfreeselecttool.c:452:    gimp_tool_control_halt (tool->control);
./app/tools/gimpfreeselecttool.c:563:  gimp_tool_control_activate (tool->control);
./app/tools/gimpfreeselecttool.c:1009:      gimp_tool_control_activate (tool->control);
./app/tools/gimpfreeselecttool.c:1019:          gimp_tool_control_halt (tool->control);
./app/tools/gimpfreeselecttool.c:1156:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpfreeselecttool.c:1269:                            gimp_tool_control_get_cursor (tool->control),
./app/tools/gimpfreeselecttool.c:1270:                            gimp_tool_control_get_tool_cursor (tool->control),
./app/tools/gimpiscissorstool.c:297:  tool_class->control        = gimp_iscissors_tool_control;
./app/tools/gimpiscissorstool.c:340:  gimp_tool_control_set_scroll_lock (tool->control, TRUE);
./app/tools/gimpiscissorstool.c:341:  gimp_tool_control_set_snap_to     (tool->control, FALSE);
./app/tools/gimpiscissorstool.c:342:  gimp_tool_control_set_preserve    (tool->control, FALSE);
./app/tools/gimpiscissorstool.c:343:  gimp_tool_control_set_dirty_mask  (tool->control, GIMP_DIRTY_IMAGE_SIZE);
./app/tools/gimpiscissorstool.c:344:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_ISCISSORS);
./app/tools/gimpiscissorstool.c:386:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpiscissorstool.c:415:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpiscissorstool.c:421:          gimp_tool_control_activate (tool->control);
./app/tools/gimpiscissorstool.c:426:      gimp_tool_control_activate (tool->control);
./app/tools/gimpiscissorstool.c:863:      /*  plot both curves, and the control point between them  */
./app/tools/gimpiscissorstool.c:1121:  gimp_tool_control_halt (tool->control);
./app/tools/gimpmagnifytool.c:119:  gimp_tool_control_set_scroll_lock            (tool->control, TRUE);
./app/tools/gimpmagnifytool.c:120:  gimp_tool_control_set_handle_empty_image     (tool->control, TRUE);
./app/tools/gimpmagnifytool.c:121:  gimp_tool_control_set_wants_click            (tool->control, TRUE);
./app/tools/gimpmagnifytool.c:122:  gimp_tool_control_set_snap_to                (tool->control, FALSE);
./app/tools/gimpmagnifytool.c:124:  gimp_tool_control_set_cursor                 (tool->control,
./app/tools/gimpmagnifytool.c:126:  gimp_tool_control_set_tool_cursor            (tool->control,
./app/tools/gimpmagnifytool.c:128:  gimp_tool_control_set_cursor_modifier        (tool->control,
./app/tools/gimpmagnifytool.c:130:  gimp_tool_control_set_toggle_cursor_modifier (tool->control,
./app/tools/gimpmagnifytool.c:148:  gimp_tool_control_activate (tool->control);
./app/tools/gimpmagnifytool.c:168:  gimp_tool_control_halt (tool->control);
./app/tools/gimpmagnifytool.c:344:  gimp_tool_control_set_toggled (tool->control,
./app/tools/gimpcolortool.c:148:  tool_class->control        = gimp_color_tool_control;
./app/tools/gimpcolortool.c:166:  gimp_tool_control_set_action_value_2 (tool->control,
./app/tools/gimpcolortool.c:224:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpcolortool.c:250:      gimp_tool_control_set_scroll_lock (tool->control, TRUE);
./app/tools/gimpcolortool.c:257:                                    gimp_tool_control_get_precision (tool->control),
./app/tools/gimpcolortool.c:305:      gimp_tool_control_set_scroll_lock (tool->control, FALSE);
./app/tools/gimpcolortool.c:435:                                        gimp_tool_control_get_precision (tool->control),
./app/tools/gimpcolortool.c:759:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpcolortool.c:782:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpcolortool.c:818:  gimp_tool_control_activate (tool->control);
./app/tools/gimpcolortool.c:819:  gimp_tool_control_set_scroll_lock (tool->control, TRUE);
./app/tools/gimpperspectivetool.c:96:  gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimpclonetool.c:81:  gimp_tool_control_set_tool_cursor     (tool->control,
./app/tools/gimpclonetool.c:83:  gimp_tool_control_set_action_object_2 (tool->control,
./app/tools/tool_manager.c:268:          if (gimp_tool_control_is_active (tool->control))
./app/tools/tool_manager.c:269:            gimp_tool_control_halt (tool->control);
./app/tools/tool_manager.c:581:      ! gimp_tool_control_get_preserve (tool->control) &&
./app/tools/tool_manager.c:582:      (gimp_tool_control_get_dirty_mask (tool->control) & dirty_mask))
./app/tools/gimppenciltool.c:69:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_PENCIL);
./app/tools/gimpvectortool.c:174:  tool_class->control        = gimp_vector_tool_control;
./app/tools/gimpvectortool.c:191:  gimp_tool_control_set_scroll_lock        (tool->control, FALSE);
./app/tools/gimpvectortool.c:192:  gimp_tool_control_set_handle_empty_image (tool->control, TRUE);
./app/tools/gimpvectortool.c:193:  gimp_tool_control_set_motion_mode        (tool->control,
./app/tools/gimpvectortool.c:195:  gimp_tool_control_set_precision          (tool->control,
./app/tools/gimpvectortool.c:197:  gimp_tool_control_set_cursor             (tool->control, GIMP_CURSOR_MOUSE);
./app/tools/gimpvectortool.c:198:  gimp_tool_control_set_tool_cursor        (tool->control,
./app/tools/gimpvectortool.c:242:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpvectortool.c:278:  gimp_tool_control_activate (tool->control);
./app/tools/gimpvectortool.c:646:  gimp_tool_control_halt (tool->control);
./app/tools/gimpvectortool.c:1352:  gimp_tool_control_set_tool_cursor     (tool->control, tool_cursor);
./app/tools/gimpvectortool.c:1353:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimpvectortool.c:1403:          /* control handles */
./app/tools/gimpvectortool.c:1422:          /* the lines to the control handles */
./app/tools/gimpeditselectiontool.c:149:  gimp_tool_control_set_scroll_lock (tool->control, EDIT_SELECT_SCROLL_LOCK);
./app/tools/gimpeditselectiontool.c:150:  gimp_tool_control_set_motion_mode (tool->control, GIMP_MOTION_MODE_COMPRESS);
./app/tools/gimpeditselectiontool.c:435:    gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimpeditselectiontool.c:446:  gimp_tool_control_activate (tool->control);
./app/tools/gimpeditselectiontool.c:456:                                gimp_tool_control_get_precision (tool->control),
./app/tools/gimpeditselectiontool.c:725:                                gimp_tool_control_get_precision (tool->control),
./app/tools/gimpsmudgetool.c:72:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_SMUDGE);
./app/tools/gimpbucketfilltool.c:104:  gimp_tool_control_set_scroll_lock     (tool->control, TRUE);
./app/tools/gimpbucketfilltool.c:105:  gimp_tool_control_set_wants_click     (tool->control, TRUE);
./app/tools/gimpbucketfilltool.c:106:  gimp_tool_control_set_tool_cursor     (tool->control,
./app/tools/gimpbucketfilltool.c:108:  gimp_tool_control_set_action_value_1  (tool->control,
./app/tools/gimpbucketfilltool.c:110:  gimp_tool_control_set_action_object_1 (tool->control,
./app/tools/gimpbucketfilltool.c:233:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimpforegroundselecttool.c:166:  tool_class->control            = gimp_foreground_select_tool_control;
./app/tools/gimpforegroundselecttool.c:185:  gimp_tool_control_set_scroll_lock (tool->control, FALSE);
./app/tools/gimpforegroundselecttool.c:186:  gimp_tool_control_set_preserve    (tool->control, FALSE);
./app/tools/gimpforegroundselecttool.c:187:  gimp_tool_control_set_dirty_mask  (tool->control, GIMP_DIRTY_IMAGE_SIZE);
./app/tools/gimpforegroundselecttool.c:188:  gimp_tool_control_set_precision   (tool->control,
./app/tools/gimpforegroundselecttool.c:190:  gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimpforegroundselecttool.c:193:  gimp_tool_control_set_action_value_2 (tool->control,
./app/tools/gimpforegroundselecttool.c:282:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpforegroundselecttool.c:376:      gimp_tool_control_set_toggled (tool->control, options->background);
./app/tools/gimpforegroundselecttool.c:448:      if (! gimp_tool_control_is_active (tool->control))
./app/tools/gimpforegroundselecttool.c:449:        gimp_tool_control_activate (tool->control);
./app/tools/gimpforegroundselecttool.c:488:      gimp_tool_control_halt (tool->control);
./app/tools/gimpforegroundselecttool.c:738:      gimp_tool_control_set_tool_cursor        (tool->control,
./app/tools/gimpforegroundselecttool.c:740:      gimp_tool_control_set_toggle_tool_cursor (tool->control,
./app/tools/gimpforegroundselecttool.c:743:      gimp_tool_control_set_toggled (tool->control, options->background);
./app/tools/gimpforegroundselecttool.c:747:      gimp_tool_control_set_tool_cursor        (tool->control,
./app/tools/gimpforegroundselecttool.c:749:      gimp_tool_control_set_toggle_tool_cursor (tool->control,
./app/tools/gimpforegroundselecttool.c:752:      gimp_tool_control_set_toggled (tool->control, FALSE);
./app/tools/gimpregionselecttool.c:108:  gimp_tool_control_set_scroll_lock (tool->control, TRUE);
./app/tools/gimpregionselecttool.c:109:  gimp_tool_control_set_motion_mode (tool->control, GIMP_MOTION_MODE_COMPRESS);
./app/tools/gimpregionselecttool.c:155:  gimp_tool_control_activate (tool->control);
./app/tools/gimpregionselecttool.c:187:  gimp_tool_control_halt (tool->control);
./app/tools/gimpregionselecttool.c:319:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimprectangletool.c:845:  gimp_tool_control_activate (tool->control);
./app/tools/gimprectangletool.c:875:  gimp_tool_control_get_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:958:  gimp_tool_control_halt (tool->control);
./app/tools/gimprectangletool.c:1002:  gimp_tool_control_set_snap_offsets (tool->control, 0, 0, 0, 0);
./app/tools/gimprectangletool.c:1045:  gimp_tool_control_get_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:1140:          gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:1410:  gimp_tool_control_set_snap_offsets (GIMP_TOOL (rect_tool)->control,
./app/tools/gimprectangletool.c:1638:  gimp_tool_control_set_cursor (tool->control, cursor);
./app/tools/gimprectangletool.c:1670:      if (gimp_tool_control_is_active (tool->control))
./app/tools/gimprectangletool.c:1718:                                  ! gimp_tool_control_is_active (tool->control),
./app/tools/gimprectangletool.c:1731:                                  ! gimp_tool_control_is_active (tool->control),
./app/tools/gimprectangletool.c:1743:                                  ! gimp_tool_control_is_active (tool->control),
./app/tools/gimprectangletool.c:2074:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimprectangletool.c:2075:    gimp_tool_control_halt (tool->control);
./app/tools/gimprectangletool.c:2194:  /* We don't want to synthesize motions if the tool control is active
./app/tools/gimprectangletool.c:2205:  if (gimp_tool_control_is_active (tool->control) ||
./app/tools/gimprectangletool.c:3070:      gimp_tool_control_set_snap_offsets (tool->control, 0, 0, 0, 0);
./app/tools/gimprectangletool.c:3074:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3081:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3088:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3095:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3102:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3108:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3114:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3120:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimprectangletool.c:3126:      gimp_tool_control_set_snap_offsets (tool->control,
./app/tools/gimppainttool.c:113:  tool_class->control        = gimp_paint_tool_control;
./app/tools/gimppainttool.c:128:  gimp_tool_control_set_motion_mode    (tool->control, GIMP_MOTION_MODE_EXACT);
./app/tools/gimppainttool.c:129:  gimp_tool_control_set_scroll_lock    (tool->control, TRUE);
./app/tools/gimppainttool.c:130:  gimp_tool_control_set_action_value_1 (tool->control,
./app/tools/gimppainttool.c:241:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimppainttool.c:687:          ! gimp_tool_control_is_active (GIMP_TOOL (draw_tool)->control))
./app/tools/gimppainttool.c:727:  gimp_tool_control_set_precision (tool->control,
./app/tools/gimpairbrushtool.c:72:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_AIRBRUSH);
./app/tools/gimptool.h:46:  GimpToolControl *control;
./app/tools/gimptool.h:87:  void          (* control)             (GimpTool              *tool,
./app/tools/gimpbrushtool.c:108:  gimp_tool_control_set_action_value_2 (tool->control,
./app/tools/gimpbrushtool.c:110:  gimp_tool_control_set_action_value_3  (tool->control,
./app/tools/gimpbrushtool.c:112:  gimp_tool_control_set_action_value_4  (tool->control,
./app/tools/gimpbrushtool.c:114:  gimp_tool_control_set_action_object_1 (tool->control,
./app/tools/gimpbrushtool.c:237:      gimp_tool_control_get_cursor_modifier (tool->control) !=
./app/tools/gimpmeasuretool.c:135:  tool_class->control             = gimp_measure_tool_control;
./app/tools/gimpmeasuretool.c:151:  gimp_tool_control_set_handle_empty_image (tool->control, TRUE);
./app/tools/gimpmeasuretool.c:152:  gimp_tool_control_set_precision          (tool->control,
./app/tools/gimpmeasuretool.c:154:  gimp_tool_control_set_tool_cursor        (tool->control,
./app/tools/gimpmeasuretool.c:177:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpmeasuretool.c:193:  if (gimp_tool_control_is_active (tool->control) && display != tool->display)
./app/tools/gimpmeasuretool.c:203:  if (gimp_tool_control_is_active (tool->control) && display == tool->display)
./app/tools/gimpmeasuretool.c:298:      if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpmeasuretool.c:318:      if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpmeasuretool.c:324:          gimp_tool_control_activate (tool->control);
./app/tools/gimpmeasuretool.c:540:  if (gimp_tool_control_is_active (tool->control) && tool->display == display)
./app/tools/gimpmeasuretool.c:647:  gimp_tool_control_set_cursor          (tool->control, cursor);
./app/tools/gimpmeasuretool.c:648:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimpmeasuretool.c:767:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpmeasuretool.c:768:    gimp_tool_control_halt (tool->control);
./app/tools/gimpdrawtool.c:92:  tool_class->control     = gimp_draw_tool_control;
./app/tools/gimpdrawtool.c:184:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimprotatetool.c:97:  gimp_tool_control_set_tool_cursor(tool->control, GIMP_TOOL_CURSOR_ROTATE);
./app/tools/gimpperspectiveclonetool.c:147:  tool_class->control        = gimp_perspective_clone_tool_control;
./app/tools/gimpperspectiveclonetool.c:163:  gimp_tool_control_set_action_object_2 (tool->control,
./app/tools/gimpperspectiveclonetool.c:302:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpperspectiveclonetool.c:348:      gimp_tool_control_activate (tool->control);
./app/tools/gimpperspectiveclonetool.c:400:      gimp_tool_control_halt (tool->control);
./app/tools/gimpperspectiveclonetool.c:554:      cursor = gimp_tool_control_get_cursor (tool->control);
./app/tools/gimpperspectiveclonetool.c:597:  gimp_tool_control_set_cursor          (tool->control, cursor);
./app/tools/gimpperspectiveclonetool.c:598:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimpperspectiveclonetool.c:889:      gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimpperspectiveclonetool.c:896:      gimp_tool_control_set_precision (tool->control,
./app/tools/gimpperspectiveclonetool.c:899:      gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimpellipseselecttool.c:95:  gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimppaintbrushtool.c:69:  gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimpimagemaptool.c:154:  tool_class->control        = gimp_image_map_tool_control;
./app/tools/gimpimagemaptool.c:185:  gimp_tool_control_set_scroll_lock (tool->control, TRUE);
./app/tools/gimpimagemaptool.c:186:  gimp_tool_control_set_preserve    (tool->control, FALSE);
./app/tools/gimpimagemaptool.c:187:  gimp_tool_control_set_dirty_mask  (tool->control,
./app/tools/gimpimagemaptool.c:374:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpimagemaptool.c:553:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimpimagemaptool.c:562:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimpimagemaptool.c:579:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimpimagemaptool.c:585:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimpimagemaptool.c:608:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimpimagemaptool.c:612:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimpimagemaptool.c:616:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimpimagemaptool.c:620:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimpimagemaptool.c:641:      gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimpimagemaptool.c:645:      gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimpimagemaptool.c:656:      gimp_tool_control_set_preserve (GIMP_TOOL (im_tool)->control, TRUE);
./app/tools/gimpimagemaptool.c:660:      gimp_tool_control_set_preserve (GIMP_TOOL (im_tool)->control, FALSE);
./app/tools/gimphealtool.c:75:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_HEAL);
./app/tools/gimpsourcetool.c:93:  tool_class->control       = gimp_source_tool_control;
./app/tools/gimpsourcetool.c:151:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpsourcetool.c:279:  gimp_tool_control_set_cursor          (tool->control, cursor);
./app/tools/gimpsourcetool.c:280:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimpbrightnesscontrasttool.c:247:  gimp_tool_control_activate (tool->control);
./app/tools/gimpbrightnesscontrasttool.c:262:  gimp_tool_control_halt (tool->control);
./app/tools/gimpbrightnesscontrasttool.c:282:  gimp_tool_control_pause (tool->control);
./app/tools/gimpbrightnesscontrasttool.c:292:  gimp_tool_control_resume (tool->control);
./app/tools/gimptoolcontrol.c:45:gimp_tool_control_init (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:47:  control->active                 = FALSE;
./app/tools/gimptoolcontrol.c:48:  control->paused_count           = 0;
./app/tools/gimptoolcontrol.c:50:  control->preserve               = TRUE;
./app/tools/gimptoolcontrol.c:51:  control->scroll_lock            = FALSE;
./app/tools/gimptoolcontrol.c:52:  control->handle_empty_image     = FALSE;
./app/tools/gimptoolcontrol.c:54:  control->dirty_mask             = GIMP_DIRTY_NONE;
./app/tools/gimptoolcontrol.c:55:  control->motion_mode            = GIMP_MOTION_MODE_HINT;
./app/tools/gimptoolcontrol.c:57:  control->auto_snap_to           = TRUE;
./app/tools/gimptoolcontrol.c:58:  control->snap_offset_x          = 0;
./app/tools/gimptoolcontrol.c:59:  control->snap_offset_y          = 0;
./app/tools/gimptoolcontrol.c:60:  control->snap_width             = 0;
./app/tools/gimptoolcontrol.c:61:  control->snap_height            = 0;
./app/tools/gimptoolcontrol.c:63:  control->precision              = GIMP_CURSOR_PRECISION_PIXEL_CENTER;
./app/tools/gimptoolcontrol.c:65:  control->toggled                = FALSE;
./app/tools/gimptoolcontrol.c:67:  control->cursor                 = GIMP_CURSOR_MOUSE;
./app/tools/gimptoolcontrol.c:68:  control->tool_cursor            = GIMP_TOOL_CURSOR_NONE;
./app/tools/gimptoolcontrol.c:69:  control->cursor_modifier        = GIMP_CURSOR_MODIFIER_NONE;
./app/tools/gimptoolcontrol.c:71:  control->toggle_cursor          = -1;
./app/tools/gimptoolcontrol.c:72:  control->toggle_tool_cursor     = -1;
./app/tools/gimptoolcontrol.c:73:  control->toggle_cursor_modifier = -1;
./app/tools/gimptoolcontrol.c:75:  control->action_value_1         = NULL;
./app/tools/gimptoolcontrol.c:76:  control->action_value_2         = NULL;
./app/tools/gimptoolcontrol.c:77:  control->action_value_3         = NULL;
./app/tools/gimptoolcontrol.c:78:  control->action_value_4         = NULL;
./app/tools/gimptoolcontrol.c:80:  control->action_object_1        = NULL;
./app/tools/gimptoolcontrol.c:81:  control->action_object_2        = NULL;
./app/tools/gimptoolcontrol.c:87:  GimpToolControl *control = GIMP_TOOL_CONTROL (object);
./app/tools/gimptoolcontrol.c:89:  g_free (control->action_value_1);
./app/tools/gimptoolcontrol.c:90:  g_free (control->action_value_2);
./app/tools/gimptoolcontrol.c:91:  g_free (control->action_value_3);
./app/tools/gimptoolcontrol.c:92:  g_free (control->action_value_4);
./app/tools/gimptoolcontrol.c:93:  g_free (control->action_object_1);
./app/tools/gimptoolcontrol.c:94:  g_free (control->action_object_2);
./app/tools/gimptoolcontrol.c:103:gimp_tool_control_activate (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:105:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:107:  g_return_if_fail (control->active == FALSE);
./app/tools/gimptoolcontrol.c:110:  control->active = TRUE;
./app/tools/gimptoolcontrol.c:114:gimp_tool_control_halt (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:116:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:118:  g_return_if_fail (control->active == TRUE);
./app/tools/gimptoolcontrol.c:121:  control->active = FALSE;
./app/tools/gimptoolcontrol.c:125:gimp_tool_control_is_active (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:127:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:129:  return control->active;
./app/tools/gimptoolcontrol.c:133:gimp_tool_control_pause (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:135:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:137:  control->paused_count++;
./app/tools/gimptoolcontrol.c:141:gimp_tool_control_resume (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:143:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:145:  control->paused_count--;
./app/tools/gimptoolcontrol.c:149:gimp_tool_control_is_paused (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:151:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:153:  return control->paused_count > 0;
./app/tools/gimptoolcontrol.c:157:gimp_tool_control_set_preserve (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:160:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:162:  control->preserve = preserve ? TRUE : FALSE;
./app/tools/gimptoolcontrol.c:166:gimp_tool_control_get_preserve (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:168:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:170:  return control->preserve;
./app/tools/gimptoolcontrol.c:174:gimp_tool_control_set_scroll_lock (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:177:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:179:  control->scroll_lock = scroll_lock ? TRUE : FALSE;
./app/tools/gimptoolcontrol.c:183:gimp_tool_control_get_scroll_lock (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:185:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:187:  return control->scroll_lock;
./app/tools/gimptoolcontrol.c:191:gimp_tool_control_set_handle_empty_image (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:194:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:196:  control->handle_empty_image = handle_empty ? TRUE : FALSE;
./app/tools/gimptoolcontrol.c:200:gimp_tool_control_get_handle_empty_image (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:202:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:204:  return control->handle_empty_image;
./app/tools/gimptoolcontrol.c:208:gimp_tool_control_set_wants_click (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:211:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:213:  control->wants_click = wants_click ? TRUE : FALSE;
./app/tools/gimptoolcontrol.c:217:gimp_tool_control_get_wants_click (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:219:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:221:  return control->wants_click;
./app/tools/gimptoolcontrol.c:225:gimp_tool_control_set_dirty_mask (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:228:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:230:  control->dirty_mask = dirty_mask;
./app/tools/gimptoolcontrol.c:234:gimp_tool_control_get_dirty_mask (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:236:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), GIMP_DIRTY_NONE);
./app/tools/gimptoolcontrol.c:238:  return control->dirty_mask;
./app/tools/gimptoolcontrol.c:242:gimp_tool_control_set_motion_mode (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:245:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:247:  control->motion_mode = motion_mode;
./app/tools/gimptoolcontrol.c:251:gimp_tool_control_get_motion_mode (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:253:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), GIMP_MOTION_MODE_HINT);
./app/tools/gimptoolcontrol.c:255:  return control->motion_mode;
./app/tools/gimptoolcontrol.c:259:gimp_tool_control_set_snap_to (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:262:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:264:  control->auto_snap_to = snap_to ? TRUE : FALSE;
./app/tools/gimptoolcontrol.c:268:gimp_tool_control_get_snap_to (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:270:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:272:  return control->auto_snap_to;
./app/tools/gimptoolcontrol.c:276:gimp_tool_control_set_snap_offsets (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:282:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:284:  control->snap_offset_x = offset_x;
./app/tools/gimptoolcontrol.c:285:  control->snap_offset_y = offset_y;
./app/tools/gimptoolcontrol.c:286:  control->snap_width    = width;
./app/tools/gimptoolcontrol.c:287:  control->snap_height   = height;
./app/tools/gimptoolcontrol.c:291:gimp_tool_control_get_snap_offsets (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:297:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:299:  if (offset_x) *offset_x = control->snap_offset_x;
./app/tools/gimptoolcontrol.c:300:  if (offset_y) *offset_y = control->snap_offset_y;
./app/tools/gimptoolcontrol.c:301:  if (width)    *width    = control->snap_width;
./app/tools/gimptoolcontrol.c:302:  if (height)   *height   = control->snap_height;
./app/tools/gimptoolcontrol.c:306:gimp_tool_control_set_precision (GimpToolControl     *control,
./app/tools/gimptoolcontrol.c:309:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:311:  control->precision = precision;
./app/tools/gimptoolcontrol.c:315:gimp_tool_control_get_precision (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:317:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control),
./app/tools/gimptoolcontrol.c:320:  return control->precision;
./app/tools/gimptoolcontrol.c:324:gimp_tool_control_set_toggled (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:327:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:329:  control->toggled = toggled ? TRUE : FALSE;
./app/tools/gimptoolcontrol.c:333:gimp_tool_control_get_toggled (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:335:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:337:  return control->toggled;
./app/tools/gimptoolcontrol.c:341:gimp_tool_control_set_cursor (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:344:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:346:  control->cursor = cursor;
./app/tools/gimptoolcontrol.c:350:gimp_tool_control_set_tool_cursor (GimpToolControl    *control,
./app/tools/gimptoolcontrol.c:353:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:355:  control->tool_cursor = cursor;
./app/tools/gimptoolcontrol.c:359:gimp_tool_control_set_cursor_modifier (GimpToolControl    *control,
./app/tools/gimptoolcontrol.c:362:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:364:  control->cursor_modifier = modifier;
./app/tools/gimptoolcontrol.c:368:gimp_tool_control_set_toggle_cursor (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:371:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:373:  control->toggle_cursor = cursor;
./app/tools/gimptoolcontrol.c:377:gimp_tool_control_set_toggle_tool_cursor (GimpToolControl    *control,
./app/tools/gimptoolcontrol.c:380:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:382:  control->toggle_tool_cursor = cursor;
./app/tools/gimptoolcontrol.c:386:gimp_tool_control_set_toggle_cursor_modifier (GimpToolControl    *control,
./app/tools/gimptoolcontrol.c:389:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:391:  control->toggle_cursor_modifier = modifier;
./app/tools/gimptoolcontrol.c:395:gimp_tool_control_get_cursor (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:397:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:399:  if (control->toggled && control->toggle_cursor != -1)
./app/tools/gimptoolcontrol.c:400:    return control->toggle_cursor;
./app/tools/gimptoolcontrol.c:402:  return control->cursor;
./app/tools/gimptoolcontrol.c:406:gimp_tool_control_get_tool_cursor (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:408:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:410:  if (control->toggled && control->toggle_tool_cursor != -1)
./app/tools/gimptoolcontrol.c:411:    return control->toggle_tool_cursor;
./app/tools/gimptoolcontrol.c:413:  return control->tool_cursor;
./app/tools/gimptoolcontrol.c:417:gimp_tool_control_get_cursor_modifier (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:419:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), FALSE);
./app/tools/gimptoolcontrol.c:421:  if (control->toggled && control->toggle_cursor_modifier != -1)
./app/tools/gimptoolcontrol.c:422:    return control->toggle_cursor_modifier;
./app/tools/gimptoolcontrol.c:424:  return control->cursor_modifier;
./app/tools/gimptoolcontrol.c:428:gimp_tool_control_set_action_value_1 (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:431:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:433:  if (action != control->action_value_1)
./app/tools/gimptoolcontrol.c:435:      g_free (control->action_value_1);
./app/tools/gimptoolcontrol.c:436:      control->action_value_1 = g_strdup (action);
./app/tools/gimptoolcontrol.c:441:gimp_tool_control_get_action_value_1 (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:443:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), NULL);
./app/tools/gimptoolcontrol.c:445:  return control->action_value_1;
./app/tools/gimptoolcontrol.c:449:gimp_tool_control_set_action_value_2 (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:452:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:454:  if (action != control->action_value_2)
./app/tools/gimptoolcontrol.c:456:      g_free (control->action_value_2);
./app/tools/gimptoolcontrol.c:457:      control->action_value_2 = g_strdup (action);
./app/tools/gimptoolcontrol.c:462:gimp_tool_control_get_action_value_2 (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:464:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), NULL);
./app/tools/gimptoolcontrol.c:466:  return control->action_value_2;
./app/tools/gimptoolcontrol.c:470:gimp_tool_control_set_action_value_3 (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:473:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:475:  if (action != control->action_value_3)
./app/tools/gimptoolcontrol.c:477:      g_free (control->action_value_3);
./app/tools/gimptoolcontrol.c:478:      control->action_value_3 = g_strdup (action);
./app/tools/gimptoolcontrol.c:483:gimp_tool_control_get_action_value_3 (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:485:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), NULL);
./app/tools/gimptoolcontrol.c:487:  return control->action_value_3;
./app/tools/gimptoolcontrol.c:491:gimp_tool_control_set_action_value_4 (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:494:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:496:  if (action != control->action_value_4)
./app/tools/gimptoolcontrol.c:498:      g_free (control->action_value_4);
./app/tools/gimptoolcontrol.c:499:      control->action_value_4 = g_strdup (action);
./app/tools/gimptoolcontrol.c:504:gimp_tool_control_get_action_value_4 (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:506:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), NULL);
./app/tools/gimptoolcontrol.c:508:  return control->action_value_4;
./app/tools/gimptoolcontrol.c:512:gimp_tool_control_set_action_object_1 (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:515:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:517:  if (action != control->action_object_1)
./app/tools/gimptoolcontrol.c:519:      g_free (control->action_object_1);
./app/tools/gimptoolcontrol.c:520:      control->action_object_1 = g_strdup (action);
./app/tools/gimptoolcontrol.c:525:gimp_tool_control_get_action_object_1 (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:527:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), NULL);
./app/tools/gimptoolcontrol.c:529:  return control->action_object_1;
./app/tools/gimptoolcontrol.c:533:gimp_tool_control_set_action_object_2 (GimpToolControl *control,
./app/tools/gimptoolcontrol.c:536:  g_return_if_fail (GIMP_IS_TOOL_CONTROL (control));
./app/tools/gimptoolcontrol.c:538:  if (action != control->action_object_2)
./app/tools/gimptoolcontrol.c:540:      g_free (control->action_object_2);
./app/tools/gimptoolcontrol.c:541:      control->action_object_2 = g_strdup (action);
./app/tools/gimptoolcontrol.c:546:gimp_tool_control_get_action_object_2 (GimpToolControl *control)
./app/tools/gimptoolcontrol.c:548:  g_return_val_if_fail (GIMP_IS_TOOL_CONTROL (control), NULL);
./app/tools/gimptoolcontrol.c:550:  return control->action_object_2;
./app/tools/gimpfuzzyselecttool.c:89:  gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimpbycolorselecttool.c:91:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_HAND);
./app/tools/gimptransformtool.c:119:  tool_class->control             = gimp_transform_tool_control;
./app/tools/gimptransformtool.c:144:  gimp_tool_control_set_action_value_1(tool->control, "tools/tools-transform-preview-opacity-set");
./app/tools/gimptransformtool.c:146:  gimp_tool_control_set_scroll_lock(tool->control, TRUE);
./app/tools/gimptransformtool.c:147:  gimp_tool_control_set_preserve(tool->control, FALSE);
./app/tools/gimptransformtool.c:148:  gimp_tool_control_set_dirty_mask(tool->control,
./app/tools/gimptransformtool.c:150:  gimp_tool_control_set_precision(tool->control, GIMP_CURSOR_PRECISION_SUBPIXEL);
./app/tools/gimptransformtool.c:316:  GIMP_TOOL_CLASS(parent_class)->control(tool, action, display);
./app/tools/gimptransformtool.c:330:  gimp_tool_control_activate(tool->control);
./app/tools/gimptransformtool.c:371:  gimp_tool_control_halt(tool->control);
./app/tools/gimptransformtool.c:546:  cursor = gimp_tool_control_get_cursor(tool->control);
./app/tools/gimptransformtool.c:597:  gimp_tool_control_set_cursor(tool->control, cursor);
./app/tools/gimptransformtool.c:598:  gimp_tool_control_set_cursor_modifier(tool->control, modifier);
./app/tools/gimptransformtool.c:910:  gimp_tool_control_set_preserve(tool->control, TRUE);
./app/tools/gimptransformtool.c:985:  gimp_tool_control_set_preserve(tool->control, FALSE);
./app/tools/gimpblendtool.c:136:  gimp_tool_control_set_scroll_lock     (tool->control, TRUE);
./app/tools/gimpblendtool.c:137:  gimp_tool_control_set_precision       (tool->control,
./app/tools/gimpblendtool.c:139:  gimp_tool_control_set_cursor          (tool->control,
./app/tools/gimpblendtool.c:141:  gimp_tool_control_set_tool_cursor     (tool->control,
./app/tools/gimpblendtool.c:143:  gimp_tool_control_set_action_value_1  (tool->control,
./app/tools/gimpblendtool.c:145:  gimp_tool_control_set_action_object_1 (tool->control,
./app/tools/gimpblendtool.c:188:  gimp_tool_control_activate (tool->control);
./app/tools/gimpblendtool.c:213:  gimp_tool_control_halt (tool->control);
./app/tools/gimpblendtool.c:344:      gimp_tool_control_set_cursor_modifier (tool->control,
./app/tools/gimpblendtool.c:348:      gimp_tool_control_set_cursor_modifier (tool->control,
./app/tools/gimpblendtool.c:406:                                gimp_tool_control_get_precision (tool->control),
./app/tools/gimptransformtoolundo.c:196:          gimp_tool_control_activate (GIMP_TOOL (transform_tool)->control);
./app/tools/gimpselectiontool.c:129:           *  shift nor control are down
./app/tools/gimpselectiontool.c:336:  tool_cursor = gimp_tool_control_get_tool_cursor (tool->control);
./app/tools/gimpselectiontool.c:376:  if (gimp_tool_control_get_cursor_modifier (tool->control) ==
./app/tools/gimpselectiontool.c:383:                        gimp_tool_control_get_cursor (tool->control),
./app/tools/gimpselectiontool.c:403:  g_return_val_if_fail (gimp_tool_control_is_active (tool->control), FALSE);
./app/tools/gimperasertool.c:89:  gimp_tool_control_set_tool_cursor            (tool->control,
./app/tools/gimperasertool.c:91:  gimp_tool_control_set_toggle_cursor_modifier (tool->control,
./app/tools/gimperasertool.c:129:  gimp_tool_control_set_toggled (tool->control, options->anti_erase);
./app/tools/gimpdodgeburntool.c:96:  gimp_tool_control_set_tool_cursor        (tool->control,
./app/tools/gimpdodgeburntool.c:98:  gimp_tool_control_set_toggle_tool_cursor (tool->control,
./app/tools/gimpdodgeburntool.c:143:  gimp_tool_control_set_toggled (tool->control, (options->type == GIMP_BURN));
./app/tools/gimpconvolvetool.c:96:  gimp_tool_control_set_tool_cursor            (tool->control,
./app/tools/gimpconvolvetool.c:98:  gimp_tool_control_set_toggle_cursor_modifier (tool->control,
./app/tools/gimpconvolvetool.c:140:  gimp_tool_control_set_toggled (tool->control,
./app/tools/gimpaligntool.c:153:  tool_class->control        = gimp_align_tool_control;
./app/tools/gimpaligntool.c:178:  gimp_tool_control_set_snap_to     (tool->control, FALSE);
./app/tools/gimpaligntool.c:179:  gimp_tool_control_set_precision   (tool->control,
./app/tools/gimpaligntool.c:181:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_MOVE);
./app/tools/gimpaligntool.c:228:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpaligntool.c:229:    gimp_tool_control_halt (tool->control);
./app/tools/gimpaligntool.c:270:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpaligntool.c:295:  if (! gimp_tool_control_is_active (tool->control))
./app/tools/gimpaligntool.c:296:    gimp_tool_control_activate (tool->control);
./app/tools/gimpaligntool.c:568:  gimp_tool_control_set_cursor          (tool->control, GIMP_CURSOR_MOUSE);
./app/tools/gimpaligntool.c:569:  gimp_tool_control_set_tool_cursor     (tool->control, tool_cursor);
./app/tools/gimpaligntool.c:570:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimpinktool.c:73:  gimp_tool_control_set_tool_cursor    (tool->control, GIMP_TOOL_CURSOR_INK);
./app/tools/gimpinktool.c:74:  gimp_tool_control_set_action_value_2 (tool->control,
./app/tools/gimpinktool.c:76:  gimp_tool_control_set_action_value_3 (tool->control,
./app/tools/gimpinktool.c:78:  gimp_tool_control_set_action_value_4 (tool->control,
./app/tools/gimprectangleselecttool.c:190:  tool_class->control             = gimp_rectangle_select_tool_control;
./app/tools/gimprectangleselecttool.c:226:  gimp_tool_control_set_wants_click (tool->control, TRUE);
./app/tools/gimprectangleselecttool.c:227:  gimp_tool_control_set_precision   (tool->control,
./app/tools/gimprectangleselecttool.c:229:  gimp_tool_control_set_tool_cursor (tool->control,
./app/tools/gimprectangleselecttool.c:231:  gimp_tool_control_set_dirty_mask  (tool->control,
./app/tools/gimprectangleselecttool.c:282:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimprectangleselecttool.c:350:  if (! gimp_tool_control_is_active (tool->control))
./app/tools/gimprectangleselecttool.c:352:      gimp_tool_control_activate (tool->control);
./app/tools/gimprectangleselecttool.c:359:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimprectangleselecttool.c:361:      gimp_tool_control_halt (tool->control);
./app/tools/gimprectangleselecttool.c:440:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimprectangleselecttool.c:444:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimprectangleselecttool.c:491:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimprectangleselecttool.c:496:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimprectangleselecttool.c:508:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimprectangleselecttool.c:512:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimprectangleselecttool.c:570:    gimp_tool_control_set_cursor (tool->control, GIMP_CURSOR_CROSSHAIR_SMALL);
./app/tools/gimprectangleselecttool.c:799:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimprectangleselecttool.c:821:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimprectangleselecttool.c:859:          gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimprectangleselecttool.c:864:          gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimprectangleselecttool.c:886:  gimp_tool_control_set_preserve (tool->control, TRUE);
./app/tools/gimprectangleselecttool.c:888:  if (tool->display && ! gimp_tool_control_is_active (tool->control))
./app/tools/gimprectangleselecttool.c:936:  gimp_tool_control_set_preserve (tool->control, FALSE);
./app/tools/gimpscaletool.c:104:  gimp_tool_control_set_tool_cursor (tool->control, GIMP_TOOL_CURSOR_RESIZE);
./app/tools/gimpscaletool.c:258:  /*  if control is being held, constrain the aspect ratio  */
./app/tools/gimpmovetool.c:141:  tool_class->control        = gimp_move_tool_control;
./app/tools/gimpmovetool.c:170:  gimp_tool_control_set_snap_to            (tool->control, FALSE);
./app/tools/gimpmovetool.c:171:  gimp_tool_control_set_handle_empty_image (tool->control, TRUE);
./app/tools/gimpmovetool.c:172:  gimp_tool_control_set_tool_cursor        (tool->control,
./app/tools/gimpmovetool.c:200:  GIMP_TOOL_CLASS (parent_class)->control (tool, action, display);
./app/tools/gimpmovetool.c:264:              gimp_tool_control_set_scroll_lock (tool->control, TRUE);
./app/tools/gimpmovetool.c:265:              gimp_tool_control_set_precision   (tool->control,
./app/tools/gimpmovetool.c:268:              gimp_tool_control_activate (tool->control);
./app/tools/gimpmovetool.c:294:                  gimp_tool_control_activate (tool->control);
./app/tools/gimpmovetool.c:361:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimpmovetool.c:362:    gimp_tool_control_halt (tool->control);
./app/tools/gimpmovetool.c:371:      gimp_tool_control_set_scroll_lock (tool->control, FALSE);
./app/tools/gimpmovetool.c:372:      gimp_tool_control_set_precision   (tool->control,
./app/tools/gimpmovetool.c:769:  gimp_tool_control_set_cursor          (tool->control, cursor);
./app/tools/gimpmovetool.c:770:  gimp_tool_control_set_tool_cursor     (tool->control, tool_cursor);
./app/tools/gimpmovetool.c:771:  gimp_tool_control_set_cursor_modifier (tool->control, modifier);
./app/tools/gimpmovetool.c:822:  gimp_tool_control_activate (tool->control);
./app/tools/gimpmovetool.c:823:  gimp_tool_control_set_scroll_lock (tool->control, TRUE);
./app/tools/gimptool.c:131:  klass->control             = gimp_tool_real_control;
./app/tools/gimptool.c:154:  tool->control               = g_object_new (GIMP_TYPE_TOOL_CONTROL, NULL);
./app/tools/gimptool.c:175:  if (tool->control)
./app/tools/gimptool.c:177:      g_object_unref (tool->control);
./app/tools/gimptool.c:178:      tool->control = NULL;
./app/tools/gimptool.c:293:  gimp_tool_control_activate (tool->control);
./app/tools/gimptool.c:304:  gimp_tool_control_halt (tool->control);
./app/tools/gimptool.c:358:                        gimp_tool_control_get_cursor (tool->control),
./app/tools/gimptool.c:359:                        gimp_tool_control_get_tool_cursor (tool->control),
./app/tools/gimptool.c:360:                        gimp_tool_control_get_cursor_modifier (tool->control));
./app/tools/gimptool.c:452:      if (! gimp_tool_control_is_paused (tool->control))
./app/tools/gimptool.c:453:        GIMP_TOOL_GET_CLASS (tool)->control (tool, action, display);
./app/tools/gimptool.c:455:      gimp_tool_control_pause (tool->control);
./app/tools/gimptool.c:459:      if (gimp_tool_control_is_paused (tool->control))
./app/tools/gimptool.c:461:          gimp_tool_control_resume (tool->control);
./app/tools/gimptool.c:463:          if (! gimp_tool_control_is_paused (tool->control))
./app/tools/gimptool.c:464:            GIMP_TOOL_GET_CLASS (tool)->control (tool, action, display);
./app/tools/gimptool.c:469:                     "tool->control->paused_count == 0");
./app/tools/gimptool.c:474:      GIMP_TOOL_GET_CLASS (tool)->control (tool, action, display);
./app/tools/gimptool.c:476:      if (gimp_tool_control_is_active (tool->control))
./app/tools/gimptool.c:477:        gimp_tool_control_halt (tool->control);
./app/tools/gimptool.c:498:  if (gimp_tool_control_is_active (tool->control))
./app/tools/gimptool.c:503:      if (gimp_tool_control_get_wants_click (tool->control))
./app/tools/gimptool.c:578:  else if (gimp_tool_control_get_wants_click (tool->control))
./app/tools/gimptool.c:619:  g_return_if_fail (gimp_tool_control_is_active (tool->control));
./app/actions/plug-in-actions.c:113:    N_("Re_peat Last"), "<control>F",
./app/actions/plug-in-actions.c:119:    N_("R_e-Show Last"), "<control><shift>F",
./app/actions/layers-actions.c:74:    N_("_New Layer..."), "<control><shift>N",
./app/actions/layers-actions.c:92:    N_("D_uplicate Layer"), "<control><shift>D",
./app/actions/layers-actions.c:128:    N_("_Anchor Layer"), "<control>H",
./app/actions/dialogs-actions.c:51:    N_("_Layers"), "<control>L",
./app/actions/dialogs-actions.c:117:    N_("_Brushes"), "<control><shift>B",
./app/actions/dialogs-actions.c:129:    N_("P_atterns"), "<control><shift>P",
./app/actions/dialogs-actions.c:135:    N_("_Gradients"), "<control>G",
./app/actions/drawable-actions.c:63:    N_("_Offset..."), "<control><shift>O",
./app/actions/windows-actions.c:84:    N_("Tool_box"), "<control>B",
./app/actions/file-actions.c:77:    N_("Op_en as Layers..."), "<control><alt>O",
./app/actions/file-actions.c:101:    N_("Close all"), "<shift><control>W",
./app/actions/file-actions.c:107:    N_("_Quit"), "<control>Q",
./app/actions/file-actions.c:116:    N_("_Save"), "<control>S",
./app/actions/file-actions.c:122:    N_("Save _As..."), "<control><shift>S",
./app/actions/file-actions.c:171:        entries[i].accelerator = g_strdup_printf ("<control>%d", i + 1);
./app/actions/file-actions.c:173:        entries[i].accelerator = "<control>0";
./app/actions/select-actions.c:50:    N_("select|_All"), "<control>A",
./app/actions/select-actions.c:56:    N_("select|_None"), "<control><shift>A",
./app/actions/select-actions.c:62:    N_("_Invert"), "<control>I",
./app/actions/select-actions.c:68:    N_("_Float"), "<control><shift>L",
./app/actions/tools-actions.c:361:/* tools-value-1 is effectively used to control
./app/actions/tools-actions.c:391:    "Decrease Value 1 More", "<control>less", NULL,
./app/actions/tools-actions.c:395:    "Increase Value 1 More", "<control>greater", NULL,
./app/actions/tools-actions.c:400:/* tools-value-2 is effectively used to control
./app/actions/edit-actions.c:72:    N_("_Undo"), "<control>Z",
./app/actions/edit-actions.c:78:    N_("_Redo"), "<control>Y",
./app/actions/edit-actions.c:84:    N_("Strong Undo"), "<control><shift>Z",
./app/actions/edit-actions.c:90:    N_("Strong Redo"), "<control><shift>Y",
./app/actions/edit-actions.c:108:    N_("Cu_t"), "<control>X",
./app/actions/edit-actions.c:114:    N_("_Copy"), "<control>C",
./app/actions/edit-actions.c:120:    N_("Copy _Visible"), "<control><shift>C",
./app/actions/edit-actions.c:126:    N_("_Paste"), "<control>V",
./app/actions/edit-actions.c:138:    N_("From _Clipboard"), "<control><shift>V",
./app/actions/edit-actions.c:189:    N_("Fill with _FG Color"), "<control>comma",
./app/actions/edit-actions.c:195:    N_("Fill with B_G Color"), "<control>period",
./app/actions/edit-actions.c:201:    N_("Fill with P_attern"), "<control>semicolon",
./app/actions/view-actions.c:81:    N_( "_Close"), "<control>W",
./app/actions/view-actions.c:87:    N_("_Fit Image in Window"), "<control><shift>E",
./app/actions/view-actions.c:117:    N_("Shrink _Wrap"), "<control>E",
./app/actions/view-actions.c:139:    N_("Show _Selection"), "<control>T",
./app/actions/view-actions.c:153:    N_("Show _Guides"), "<control><shift>T",
./app/actions/view-actions.c:209:    N_("Show R_ulers"), "<control><shift>R",
./app/actions/image-actions.c:66:    N_("_New..."), "<control>N",
./app/actions/image-actions.c:108:    N_("_Duplicate"), "<control>D",
./app/actions/image-actions.c:114:    N_("Merge Visible _Layers..."), "<control>M",
./app/actions/tools-commands.c:413:      action_desc = gimp_tool_control_get_action_value_1 (tool->control);
./app/actions/tools-commands.c:435:      action_desc = gimp_tool_control_get_action_value_2 (tool->control);
./app/actions/tools-commands.c:457:      action_desc = gimp_tool_control_get_action_value_3 (tool->control);
./app/actions/tools-commands.c:479:      action_desc = gimp_tool_control_get_action_value_4 (tool->control);
./app/actions/tools-commands.c:501:      action_desc = gimp_tool_control_get_action_object_1 (tool->control);
./app/actions/tools-commands.c:523:      action_desc = gimp_tool_control_get_action_object_2 (tool->control);
./app/widgets/gimpgradienteditor.h:61:  GtkWidget      *control;
./app/widgets/gimpgradienteditor.h:77:  /*  Gradient control  */
./app/widgets/gimpcontrollerkeyboard.c:69:    "cursor-up-shift-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:72:    "cursor-up-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:78:    "cursor-up-shift-control",
./app/widgets/gimpcontrollerkeyboard.c:84:    "cursor-up-control",
./app/widgets/gimpcontrollerkeyboard.c:94:    "cursor-down-shift-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:97:    "cursor-down-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:103:    "cursor-down-shift-control",
./app/widgets/gimpcontrollerkeyboard.c:109:    "cursor-down-control",
./app/widgets/gimpcontrollerkeyboard.c:119:    "cursor-left-shift-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:122:    "cursor-left-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:128:    "cursor-left-shift-control",
./app/widgets/gimpcontrollerkeyboard.c:134:    "cursor-left-control",
./app/widgets/gimpcontrollerkeyboard.c:144:    "cursor-right-shift-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:147:    "cursor-right-control-alt",
./app/widgets/gimpcontrollerkeyboard.c:153:    "cursor-right-shift-control",
./app/widgets/gimpcontrollerkeyboard.c:159:    "cursor-right-control",
./app/widgets/gimpcolorbar.c:309: * This function gives full control over the colors displayed by the
./app/widgets/gimpcontrollerwheel.c:77:    "scroll-up-control",
./app/widgets/gimpcontrollerwheel.c:83:    "scroll-up-shift-control",
./app/widgets/gimpcontrollerwheel.c:89:    "scroll-up-control-alt",
./app/widgets/gimpcontrollerwheel.c:92:    "scroll-up-shift-control-alt",
./app/widgets/gimpcontrollerwheel.c:102:    "scroll-down-control",
./app/widgets/gimpcontrollerwheel.c:108:    "scroll-down-shift-control",
./app/widgets/gimpcontrollerwheel.c:114:    "scroll-down-control-alt",
./app/widgets/gimpcontrollerwheel.c:117:    "scroll-down-shift-control-alt",
./app/widgets/gimpcontrollerwheel.c:127:    "scroll-left-control",
./app/widgets/gimpcontrollerwheel.c:133:    "scroll-left-shift-control",
./app/widgets/gimpcontrollerwheel.c:139:    "scroll-left-control-alt",
./app/widgets/gimpcontrollerwheel.c:142:    "scroll-left-shift-control-alt",
./app/widgets/gimpcontrollerwheel.c:152:    "scroll-right-control",
./app/widgets/gimpcontrollerwheel.c:158:    "scroll-right-shift-control",
./app/widgets/gimpcontrollerwheel.c:164:    "scroll-right-control-alt",
./app/widgets/gimpcontrollerwheel.c:167:    "scroll-right-shift-control-alt",
./app/widgets/gimpcursor.c:77:#include "cursors/xbm/tool-paths-control.xbm"
./app/widgets/gimpcursor.c:78:#include "cursors/xbm/tool-paths-control-mask.xbm"
./app/widgets/gimpcursor.c:149:#include "cursors/xbm/modifier-control.xbm"
./app/widgets/gimpcursor.c:150:#include "cursors/xbm/modifier-control-mask.xbm"
./app/widgets/gimpwindow.c:66:  /* invoke control/alt accelerators */
./app/widgets/gimpwindow.c:74:  /* invoke non-(control/alt) accelerators */
./app/widgets/gimpgradienteditor.c:86:#define GRAD_MOVE_TIME 150 /* ms between mouse click and detection of movement in gradient control */
./app/widgets/gimpgradienteditor.c:162:/* Gradient control functions */
./app/widgets/gimpgradienteditor.c:302:  /* Frame for gradient view and gradient control */
./app/widgets/gimpgradienteditor.c:341:  /* Gradient control */
./app/widgets/gimpgradienteditor.c:352:  editor->control = gtk_drawing_area_new ();
./app/widgets/gimpgradienteditor.c:353:  gtk_widget_set_size_request (editor->control, -1, GRAD_CONTROL_HEIGHT);
./app/widgets/gimpgradienteditor.c:354:  gtk_widget_set_events (editor->control, GRAD_CONTROL_EVENT_MASK);
./app/widgets/gimpgradienteditor.c:355:  gtk_box_pack_start (GTK_BOX (vbox), editor->control, FALSE, FALSE, 0);
./app/widgets/gimpgradienteditor.c:356:  gtk_widget_show (editor->control);
./app/widgets/gimpgradienteditor.c:358:  g_signal_connect (editor->control, "event",
./app/widgets/gimpgradienteditor.c:362:  g_signal_connect (editor->control, "expose-event",
./app/widgets/gimpgradienteditor.c:366:  gimp_dnd_color_dest_add (GTK_WIDGET (editor->control),
./app/widgets/gimpgradienteditor.c:1059:/***** Gradient control functions *****/
./app/widgets/gimpgradienteditor.c:1195:        gtk_widget_get_pointer (editor->control, &x, &y);
./app/widgets/gimpgradienteditor.c:1740:  gtk_widget_queue_draw (editor->control);
./app/widgets/gimpgradienteditor.c:1765:  control_style = gtk_widget_get_style (editor->control);
./app/widgets/gimpgradienteditor.c:1844:  GtkStyle     *style = gtk_widget_get_style (editor->control);
./app/widgets/gimpgradienteditor.c:1860:  GtkStyle     *style = gtk_widget_get_style (editor->control);
./app/widgets/gimpgradienteditor.c:1896:  gint           pwidth     = editor->control->allocation.width;
./app/widgets/gimpgradienteditor.c:1901:   * and the gradient control's handles.
./app/widgets/gimpgradienteditor.c:1912:  gint           pwidth     = editor->control->allocation.width;
./app/widgets/.deps/gimpcursor.Po:661: ../../cursors/xbm/tool-paths-control.xbm \
./app/widgets/.deps/gimpcursor.Po:662: ../../cursors/xbm/tool-paths-control-mask.xbm \
./app/widgets/.deps/gimpcursor.Po:712: ../../cursors/xbm/modifier-control.xbm \
./app/widgets/.deps/gimpcursor.Po:713: ../../cursors/xbm/modifier-control-mask.xbm \
./app/widgets/.deps/gimpcursor.Po:2217:../../cursors/xbm/tool-paths-control.xbm:
./app/widgets/.deps/gimpcursor.Po:2219:../../cursors/xbm/tool-paths-control-mask.xbm:
./app/widgets/.deps/gimpcursor.Po:2357:../../cursors/xbm/modifier-control.xbm:
./app/widgets/.deps/gimpcursor.Po:2359:../../cursors/xbm/modifier-control-mask.xbm:
./etc/controllerrc:10:        (map "scroll-up-control-alt"         "context-gradient-select-next")
./etc/controllerrc:11:        (map "scroll-down-control-alt"       "context-gradient-select-previous")
./etc/controllerrc:14:        (map "scroll-up-shift-control"       "context-brush-select-next")
./etc/controllerrc:15:        (map "scroll-down-shift-control"     "context-brush-select-previous")
./etc/controllerrc:16:        (map "scroll-up-shift-control-alt"   "context-font-select-next")
./etc/controllerrc:17:        (map "scroll-down-shift-control-alt" "context-font-select-previous")))
./etc/controllerrc:28:        (map "cursor-up-control"    "view-scroll-top-border")
./etc/controllerrc:29:        (map "cursor-down-control"  "view-scroll-bottom-border")
./etc/controllerrc:30:        (map "cursor-left-control"  "view-scroll-left-border")
./etc/controllerrc:31:        (map "cursor-right-control" "view-scroll-right-border")
./autom4te.cache/output.0:1782:For better control, use the options below.
./autom4te.cache/output.1:1782:For better control, use the options below.
./libgimpbase/gimpsignal.c:50: * use sigaction(2) rather than signal(2) so that we can control the
./libgimp/gimpcolor_pdb.c:361: * @num_points: The number of values in the control point array.
./libgimp/gimpcolor_pdb.c:362: * @control_pts: The spline control points: { cp1.x, cp1.y, cp2.x, cp2.y, ... }.
./libgimp/gimpcolor_pdb.c:370: * of control points which describe a Catmull Rom spline which yields
./libgimp/gimptexttool_pdb.c:50: * and y parameters together control the placement of the new text by
./libgimp/gimpvectors_pdb.c:895: * @controlpoints: List of the control points for the stroke (x0, y0, x1, y1, ...).
./libgimp/gimpvectors_pdb.c:898: * returns the control points of a stroke.
./libgimp/gimpvectors_pdb.c:900: * returns the control points of a stroke. The interpretation of the
./libgimp/gimpvectors_pdb.c:903: * control points.
./libgimp/gimpvectors_pdb.c:949: * @controlpoints: List of the x- and y-coordinates of the control points.
./libgimp/gimpvectors_pdb.c:955: * of the control points can be specified. For now only strokes of the
./libgimp/gimpvectors_pdb.c:956: * type GIMP_VECTORS_STROKE_TYPE_BEZIER are supported. The control
./libgimp/gimpvectors_pdb.c:959: * control points. Each Bezier segment endpoint (anchor, A) has two
./libgimp/gimpvectors_pdb.c:960: * additional control points (C) associated. They are specified in the
./libgimp/gimpvectors_pdb.c:1128: * @x0: The x-coordinate of the control point.
./libgimp/gimpvectors_pdb.c:1129: * @y0: The y-coordinate of the control point.
./libgimp/gimpvectors_pdb.c:1176: * @x0: The x-coordinate of the first control point.
./libgimp/gimpvectors_pdb.c:1177: * @y0: The y-coordinate of the first control point.
./libgimp/gimpvectors_pdb.c:1178: * @x1: The x-coordinate of the second control point.
./libgimp/gimpvectors_pdb.c:1179: * @y1: The y-coordinate of the second control point.
./libgimp/gimppaths_pdb.c:215: * @num_path_points: The number of elements in the array, i.e. the number of points in the path * 3. Each point is made up of (x, y, type) of floats. Currently only the creation of bezier curves is allowed. The type parameter must be set to (1) to indicate a BEZIER type curve. Note that for BEZIER curves, points must be given in the following order: ACCACCAC... If the path is not closed the last control point is missed off. Points consist of three control points (control/anchor/control) so for a curve that is not closed there must be at least two points passed (2 x,y pairs). If (num_path_points/3) % 3 = 0 then the path is assumed to be closed and the points are ACCACCACCACC.
./libgimp/gimpgradient_pdb.c:1279: * control points of the neighboring segments.
./libgimp/gimppalette_pdb.c:313: * This procedures allows to control how many colors are shown per row
./libgimp/gimpcontext_pdb.c:534: * paint operations and stroke operations use this brush to control the
./libgimp/gimpcontext_pdb.c:602: * to control the application of paint to the image.
./libgimp/gimppainttools_pdb.c:32: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:73: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:116: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:170: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:212: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:254: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:296: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:337: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:375: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:420: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:462: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:510: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:553: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:605: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:653: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:694: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/gimppainttools_pdb.c:733: * @num_strokes: Number of stroke control points (count each coordinate as 2 points).
./libgimp/COPYING:142:interface definition files, plus the scripts used to control
./libgimp/COPYING:207:exercise the right to control the distribution of derivative or
./plug-ins/help-browser/dialog.c:574:       N_("_Reload"), "<control>R", N_("Reload current page"),
./plug-ins/help-browser/dialog.c:595:      NULL, "<control>C", NULL,
./plug-ins/help-browser/dialog.c:600:      NULL, "<control>plus", NULL,
./plug-ins/help-browser/dialog.c:605:      NULL, "<control>minus", NULL,
./plug-ins/help-browser/dialog.c:610:      NULL, "<control>F", N_("Find text in current page"),
./plug-ins/help-browser/dialog.c:615:      N_("Find _Again"), "<control>G", NULL,
./plug-ins/help-browser/dialog.c:620:      NULL, "<control>W", NULL,
./plug-ins/help-browser/dialog.c:625:      NULL, "<control>Q", NULL,
./plug-ins/help-browser/dialog.c:634:      N_("S_how Index"), "<control>I",
./plug-ins/ifs-compose/ifs-compose.c:639:  /* Simple color control section */
./plug-ins/ifs-compose/ifs-compose.c:686:  /* Full color control section */
./plug-ins/ifs-compose/ifs-compose.c:1043:      NULL, "<control>N", NULL,
./plug-ins/ifs-compose/ifs-compose.c:1047:      NULL, "<control>D", NULL,
./plug-ins/ifs-compose/ifs-compose.c:1051:      NULL, "<control>Z", NULL,
./plug-ins/ifs-compose/ifs-compose.c:1055:      NULL, "<control>Y", NULL,
./plug-ins/ifs-compose/ifs-compose.c:1059:      N_("Select _All"), "<control>A", NULL,
./plug-ins/ifs-compose/ifs-compose.c:1063:      N_("Re_center"), "<control>C", N_("Recompute Center"),
./plug-ins/file-jpeg/jpeg.c:429:               * to prompt the user with a dialog now so that she has control
./plug-ins/file-jpeg/jpeg.c:556:  /* Return control to the setjmp point */
./plug-ins/flame/rect.c:200:      /* interpolate and get a control point */
./plug-ins/flame/libifs.c:683: * create a control point that interpolates between the control points
./plug-ins/flame/libifs.c:684: * passed in CPS.  for now just do linear.  in the future, add control
./plug-ins/flame/libifs.c:913: * given a pointer to a string SS, fill fields of a control point CP.
./plug-ins/flame/libifs.c:1264:/* use hill climberer to find smooth ordering of control points
./plug-ins/twain/twain.h:39:    version 1.7, Sept 1997       Added job control values
./plug-ins/twain/twain.h:1259:#define DG_CONTROL          0x0001L /* data pertaining to control       */
./plug-ins/imagemap/imap_menu.c:151:  { "SaveAs", GTK_STOCK_SAVE_AS, N_("Save _As..."), "<shift><control>S", NULL,
./plug-ins/imagemap/imap_menu.c:163:  { "SelectAll", NULL, N_("Select _All"), "<control>A", NULL, do_select_all},
./plug-ins/imagemap/imap_menu.c:164:  { "DeselectAll", NULL, N_("D_eselect All"), "<shift><control>A", NULL,
./plug-ins/script-fu/tinyscheme/Manual.txt:142:     When USE_ASCII_NAMES is defined, various control characters can be
./plug-ins/script-fu/tinyscheme/CHANGES:93:    Finally I managed to mess it up with my version control. Version
./plug-ins/script-fu/scripts/test-sphere.scm:45:; is only useful in interactive mode. It will create a widget in the control
./plug-ins/script-fu/scripts/test-sphere.scm:65:; Only useful in interactive mode. It will create a widget in the control
./plug-ins/script-fu/scripts/test-sphere.scm:79:; Only useful in interactive mode. It will create a widget in the control
./plug-ins/script-fu/scripts/test-sphere.scm:92:; Only useful in interactive mode. It will create a widget in the control
./plug-ins/script-fu/scripts/test-sphere.scm:105:; Only useful in interactive mode. It will create a widget in the control
./plug-ins/script-fu/scripts/test-sphere.scm:129:; Only useful in interactive mode. It will create a widget in the control
./plug-ins/script-fu/scripts/test-sphere.scm:141:; Only useful in interactive mode. It will create a widget in the control
./plug-ins/gfig/gfig-star.c:81:  /* Just draw a control point around it */
./plug-ins/gfig/gfig-star.c:106:  /* Other control points */
./plug-ins/gfig/gfig-star.c:402:  /* Realy draw the control points */
./plug-ins/gfig/gfig-spiral.c:83:  // Just draw a control point around it
./plug-ins/gfig/gfig-spiral.c:98:  // Other control point
./plug-ins/gfig/gfig-spiral.c:316:  /* Realy draw the control points */
./plug-ins/gfig/gfig-dialog.c:89:    TRUE,                 /* show control points           */
./plug-ins/gfig/gfig-dialog.c:856:      NULL, "<control>O", NULL,
./plug-ins/gfig/gfig-dialog.c:860:      NULL, "<control>S", NULL,
./plug-ins/gfig/gfig-dialog.c:864:      NULL, "<control>C", NULL,
./plug-ins/gfig/gfig-dialog.c:870:      N_("_Undo"), "<control>Z", NULL,
./plug-ins/gfig/gfig-dialog.c:878:      N_("_Grid"), "<control>G", NULL,
./plug-ins/gfig/gfig-dialog.c:882:      NULL, "<control>P", NULL,
./plug-ins/gfig/gfig-dialog.c:886:      NULL, "<control>U", N_("Raise selected object"),
./plug-ins/gfig/gfig-dialog.c:890:      NULL, "<control>D", N_("Lower selected object"),
./plug-ins/gfig/gfig-dialog.c:894:      NULL, "<control>T", N_("Raise selected object to top"),
./plug-ins/gfig/gfig-dialog.c:898:      NULL, "<control>B", N_("Lower selected object to bottom"),
./plug-ins/gfig/gfig-dialog.c:902:      NULL, "<control>H", N_("Show previous object"),
./plug-ins/gfig/gfig-dialog.c:906:      NULL, "<control>L", N_("Show next object"),
./plug-ins/gfig/gfig-dialog.c:910:      NULL, "<control>A", N_("Show all objects"),
./plug-ins/gfig/gfig-dialog.c:1240:      toggle = gtk_check_button_new_with_label (_("Show control points"));
./plug-ins/gfig/gfig-dobject.c:770: * the new object is set to values taken from the style control
./plug-ins/gfig/gfig-poly.c:78:  /* Just draw a control point around it */
./plug-ins/gfig/gfig-poly.c:93:  /* Other control point */
./plug-ins/gfig/gfig-poly.c:291:  // Undraw it to start with - removes control points
./plug-ins/gfig/gfig-poly.c:350:  // draw it + control pnts
./plug-ins/gfig/gfig-poly.c:384:  // Undraw it to start with - removes control points
./plug-ins/gfig/gfig-poly.c:474:  // draw it + control pnts
./plug-ins/gfig/gfig-poly.c:551:  /* Realy draw the control points */
./plug-ins/gfig/gfig-style.c:664: * gfig_style_set_content_from_style() sets all of the style control widgets
./plug-ins/gfig/gfig-style.c:712: * style to those that appear in the style control widgets f
./plug-ins/gfig/gfig-style.c:747:  /* FIXME when there is an opacity control widget to read */
./plug-ins/gfig/gfig-bezier.c:151:    else /* subdivide control points at mid */
./plug-ins/gfig/gfig-bezier.c:210:  /* Generate an array of doubles which are the control points */
./plug-ins/gfig/gfig-bezier.c:345:  /* Realy draw the control points */
./plug-ins/gfig/gfig-bezier.c:458:                           _("Draws lines between the control points. "
./plug-ins/gfig/README:15:An object is constructed as a number of control points and these are used 
./plug-ins/gfig/README:32:Each control point can be moved.
./plug-ins/gfig/README:202:control how the curve is displayed and if it is closed.
./plug-ins/gfig/README:287:the drawing of the control points / painting on the screen and in the target
./plug-ins/gfig/README:298:Points an array of pairs of doubles that define the control points
./plug-ins/gfig/gfig-arc.c:702:  /* Under control point */
./plug-ins/file-xjt/xjpeg.c:75:  /* Return control to the setjmp point */
./plug-ins/gradient-flare/gradient-flare.c:1550:  /* encode white spaces and control characters (if any) */
./plug-ins/pygimp/plug-ins/py-slice.py:234:        #Hellraisen IE 6 doesn't support CSS for table control.
./plug-ins/pygimp/doc/pygimp.sgml:42:      Gimp-Python the script is in control.</Para>
./plug-ins/pygimp/doc/pygimp.html:381:      Gimp-Python the script is in control.</P
./plug-ins/pygimp/COPYING:126:exercise the right to control the distribution of derivative or
./plug-ins/pygimp/COPYING:159:control compilation and installation of the executable.  However, as a
./plug-ins/pygimp/INSTALL:66:     control about installation paths (and distribution making).
./plug-ins/selection-to-path/spline.h:36:   a starting point, ending point, and two control points.  The
./plug-ins/selection-to-path/spline.h:42:  real_coordinate_type v[4];	/* The control points.  */
./plug-ins/selection-to-path/fit.c:1379:/* Find closer-to-optimal t values for the given x,y's and control
./plug-ins/selection-to-path/fit.c:1456:      /* The t value might be negative or > 1, if the choice of control
./plug-ins/selection-to-path/fit.c:1614:   control points that we eventually decide upon to fit the curve will
./plug-ins/selection-to-path/fit.c:1842:     their control points, so we only have to change the degree) unless
./plug-ins/common/file-html-table.c:30: * Once I first found out that it was possible to have pixel level control
./plug-ins/common/file-html-table.c:514:			     "level positioning control."),
./plug-ins/common/warp.c:29: * representing the X and Y gradients of the "control" image. For this
./plug-ins/common/warp.c:30: * purpose, all channels of the control image are summed for a scalar
./plug-ins/common/warp.c:52: *	         Added substep increments for finer control
./plug-ins/common/warp.c:56: * Version 0.32  10/25/97   Added magnitude control map (secondary control)
./plug-ins/common/warp.c:217:    { GIMP_PDB_DRAWABLE, "warp-map",     "Displacement control map" },
./plug-ins/common/warp.c:222:    { GIMP_PDB_DRAWABLE, "mag-map",      "Magnitude control map" },
./plug-ins/common/warp.c:225:    { GIMP_PDB_INT32,    "grad-map",     "Gradient control map" },
./plug-ins/common/warp.c:227:    { GIMP_PDB_INT32,    "vector-map",   "Fixed vector control map" },
./plug-ins/common/warp.c:235:			  "the gradient of a separate control matrix. The "
./plug-ins/common/warp.c:1208:  GimpDrawable *disp_map;    /* Displacement map, ie, control array */
./plug-ins/common/cml-explorer.c:460:                          "control CML_explorer via parameter file.",
./plug-ins/common/despeckle.c:489:   * Box size (diameter) control...
./plug-ins/common/despeckle.c:505:   * Black level control...
./plug-ins/common/despeckle.c:521:   * White level control...
./plug-ins/common/curve-bend.c:459:    N_("Bend the image using two control curves"),
./plug-ins/common/curve-bend.c:1587:    // pick representative points from the curve and make them control points
./plug-ins/common/unit-editor.c:120:    NULL, "<control>N",
./plug-ins/common/unit-editor.c:126:    NULL,  "<control>D",
./plug-ins/common/file-pdf.c:1068: * @width_label:       Optional label for the width control.
./plug-ins/common/file-pdf.c:1070: * @height_label:      Optional label for the height control.
./plug-ins/common/oilify.c:113:    { GIMP_PDB_DRAWABLE, "mask-size-map", "Mask size control map"          },
./plug-ins/common/oilify.c:115:    { GIMP_PDB_DRAWABLE, "exponent-map",  "Exponent control map"           }
./plug-ins/common/file-png.c:307:                          "file-png-save that allows to control whether "
./plug-ins/common/filter-pack.c:1192:  GtkWidget *control;
./plug-ins/common/filter-pack.c:1237:                           control      = fp_create_control ();
./plug-ins/common/filter-pack.c:1251:  gtk_table_attach (GTK_TABLE (table), control, 1, 2, 1, 3,
./plug-ins/common/contrast-retinex.c:777:      The use of the variance makes it possible to control the degree of saturation of the colors.
./plug-ins/common/animation-play.c:459:      NULL, "<control>W", NULL,
./plug-ins/common/animation-play.c:464:      NULL, "<control>Q", NULL,
./plug-ins/common/animation-play.c:469:      N_("Faster"), "<control>L", N_("Increase the speed of the animation"),
./plug-ins/common/animation-play.c:474:      N_("Slower"), "<control>J", N_("Decrease the speed of the animation"),
./plug-ins/common/animation-play.c:479:      N_("Reset speed"), "<control>K", N_("Reset the speed of the animation"),
./plug-ins/common/qbist.c:83:  gint          control[MAX_TRANSFORMS];
./plug-ins/common/qbist.c:129:      info->control[k] = g_rand_int_range (gr, 0, NUM_REGISTERS);
./plug-ins/common/qbist.c:157:          n_info->control[g_rand_int_range (gr, 0, MAX_TRANSFORMS)] =
./plug-ins/common/qbist.c:189:      check_last_modified (info, p, info->control[p]);
./plug-ins/common/qbist.c:210:          info->control[i] = info->dest[i];
./plug-ins/common/qbist.c:266:                  cr = info->control[i];
./plug-ins/common/qbist.c:646:    info[0].control[i] = get_be16 (buf + i * 2 + MAX_TRANSFORMS * 2 * 2);
./plug-ins/common/qbist.c:675:    set_be16 (buf + i * 2 + MAX_TRANSFORMS * 2 * 2, info[0].control[i]);
./plug-ins/common/newsprint.c:300:  /* anti-alias control */
./plug-ins/common/newsprint.c:1441:  /* anti-alias control */
./plug-ins/common/lens-flare.c:31: * - more flare types, more control (color, size, intensity...)
./plug-ins/common/iwarp.c:262:                          N_("Use mouse control to warp image areas"),
./plug-ins/common/edge-dog.c:135:                          N_("Edge detection with control of edge thickness"),
./modules/controller-midi.c:857:          midi_event (midi, event->data.control.channel,
./modules/controller-midi.c:858:                      event->data.control.param + 256,
./modules/controller-midi.c:859:                      (gdouble) event->data.control.value / 127.0);
./configure:1782:For better control, use the options below.
./ChangeLog.pre-1-0:796:	* app/transform.[ch]: applied gimp-alt-980412, fixes control
./cursors/makefile.msc:24:	modifier_control		modifier-control.png \
./cursors/makefile.msc:59:	tool_paths_control	tool-paths-control.png \
./cursors/tool-cursors.list:40:  ./modifier-control.png
./cursors/tool-cursors.list:108:  ./tool-paths-control.png
./cursors/Makefile.in:479:	modifier-control.png		\
./cursors/Makefile.in:514:	tool-paths-control.png		\
./cursors/Makefile.in:577:	xbm/modifier-control.xbm		\
./cursors/Makefile.in:578:	xbm/modifier-control-mask.xbm		\
./cursors/Makefile.in:604:	xbm/tool-paths-control.xbm		\
./cursors/Makefile.in:605:	xbm/tool-paths-control-mask.xbm		\
./cursors/Makefile.am:24:	modifier-control.png		\
./cursors/Makefile.am:59:	tool-paths-control.png		\
./cursors/Makefile.am:122:	xbm/modifier-control.xbm		\
./cursors/Makefile.am:123:	xbm/modifier-control-mask.xbm		\
./cursors/Makefile.am:149:	xbm/tool-paths-control.xbm		\
./cursors/Makefile.am:150:	xbm/tool-paths-control-mask.xbm		\
./cursors/Makefile:479:	modifier-control.png		\
./cursors/Makefile:514:	tool-paths-control.png		\
./cursors/Makefile:577:	xbm/modifier-control.xbm		\
./cursors/Makefile:578:	xbm/modifier-control-mask.xbm		\
./cursors/Makefile:604:	xbm/tool-paths-control.xbm		\
./cursors/Makefile:605:	xbm/tool-paths-control-mask.xbm		\
./tools/pdbgen/pdb/vectors.pdb:747:    $blurb = 'returns the control points of a stroke.';
./tools/pdbgen/pdb/vectors.pdb:750:returns the control points of a stroke. The interpretation of the coordinates
./tools/pdbgen/pdb/vectors.pdb:752:bezier stroke, where the coordinates are the control points.
./tools/pdbgen/pdb/vectors.pdb:768:          desc => 'List of the control points for the stroke (x0, y0, x1, y1, ...).',
./tools/pdbgen/pdb/vectors.pdb:882:control points can be specified.
./tools/pdbgen/pdb/vectors.pdb:884:The control points are specified as a pair of float values for the x- and
./tools/pdbgen/pdb/vectors.pdb:886:The Bezier stroke type needs a multiple of three control points. Each Bezier
./tools/pdbgen/pdb/vectors.pdb:887:segment endpoint (anchor, A) has two additional control points (C) associated.
./tools/pdbgen/pdb/vectors.pdb:899:	  desc => 'List of the x- and y-coordinates of the control points.',
./tools/pdbgen/pdb/vectors.pdb:1048:          desc => 'The x-coordinate of the control point' },
./tools/pdbgen/pdb/vectors.pdb:1050:          desc => 'The y-coordinate of the control point' },
./tools/pdbgen/pdb/vectors.pdb:1097:          desc => 'The x-coordinate of the first control point' },
./tools/pdbgen/pdb/vectors.pdb:1099:          desc => 'The y-coordinate of the first control point' },
./tools/pdbgen/pdb/vectors.pdb:1101:          desc => 'The x-coordinate of the second control point' },
./tools/pdbgen/pdb/vectors.pdb:1103:          desc => 'The y-coordinate of the second control point' },
./tools/pdbgen/pdb/context.pdb:410:All paint operations and stroke operations use this brush to control
./tools/pdbgen/pdb/context.pdb:473:pattern to control the application of paint to the image.
./tools/pdbgen/pdb/palette.pdb:298:This procedures allows to control how many colors are shown per row when the
./tools/pdbgen/pdb/paint_tools.pdb:25:		 desc => 'Number of stroke control points (count each
./tools/pdbgen/pdb/gradient.pdb:1325:actual delta (which is returned) will be limited by the control points of the
./tools/pdbgen/pdb/paths.pdb:198:			      If the path is not closed the last control
./tools/pdbgen/pdb/paths.pdb:200:			      control points (control/anchor/control) so for a
./tools/pdbgen/pdb/text_tool.pdb:29:argument. The x and y parameters together control the placement of the new
./tools/pdbgen/pdb/color.pdb:348:integers which define a set of control points which describe a Catmull Rom
./tools/pdbgen/pdb/color.pdb:361:	  desc => 'The spline control points: { cp1.x, cp1.y, cp2.x, cp2.y,
./tools/pdbgen/pdb/color.pdb:364:		     desc => 'The number of values in the control point array' }
./libgimpwidgets/gimpunitmenu.c:392: * A GimpUnitMenu can be setup to control the number of digits shown
./libgimpwidgets/gimpwidgets.c:476: * Creates a widget that allows the user to control how the random number
./libgimpwidgets/gimppropwidgets.c:1068: * Creates a horizontal scale to control the value of the specified
./libgimpwidgets/gimpenumcombobox.c:130: * This is just a convenience function. If you need more control over
./libgimpwidgets/gimpcellrenderertoggle.c:412: * example used in the Layers treeview to indicate and control the

